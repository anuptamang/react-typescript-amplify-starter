
// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------


// --
//  @param {$fontfamily} - font family name
//  @param {$filename} - file name in 'fonts' folder (e.g. my-web-font.woff)
//  @param {$fontweight} - @default: normal;
//  @param {$fontstyle} - @default: normal;
//
//  NOTE: used only woff, because in supported in all browsers:
// --

@mixin fontface($fontfamily, $filename, $fontweight: normal, $fontstyle: normal) {
  @font-face {
    font-family: $fontfamily;
    src: url('#{$base-font-path}/#{$filename}.woff') format('woff');
    font-display: swap;
    font-weight: $fontweight;
    font-style: $fontstyle;
  }
}

// --

//  @param {$min-font-size} - minimum font size (in PX)
//  @param {$max-font-size} - maximum font size (in PX)
//  @param {$min-vw} - minimum viewport where minimum font size become fixed @default: $fluid-min;
//  @param {$max-vw} - maximum viewport where maximum font size become fixed @default: $fluid-max;
//
//  h1 {
//    @include fluid-type(12px, 24px);
//  }
//
//  NOTE:
//
//  Important: all values should be in same units (px, rem, em)
//
//  h2 {
//    @include fluid-type(2rem, 4rem, 32rem, 190rem);
//  }
//
//  This font work:;
//
//  h2 {
//    @include fluid-type(2rem, 4em, 320px, 1920px);
//  }

// --


@mixin fluid-type($min-font-size, $max-font-size, $min-vw: $fluid-min, $max-vw: $fluid-max) {
  $unit1: unit($min-vw);
  $unit2: unit($max-vw);
  $unit3: unit($min-font-size);
  $unit4: unit($max-font-size);
  $multiplier: strip-unit($max-font-size - $min-font-size);

  @if $unit3 == 'rem' and $unit4 == 'rem' {
    $multiplier: strip-unit($max-font-size - $min-font-size) * strip-unit($rem-base);
  }

  font-size: $min-font-size;
  @media screen and (min-width: $min-vw) {
    font-size: calc(#{$min-font-size} + #{$multiplier} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
  }
  @media screen and (min-width: $max-vw) {
    font-size: $max-font-size;
  }
}


@mixin make-embed($map) {
  $ratio-x: nth($map, 1);
  $ratio-y: nth($map, 2);

  &:before {
    padding-top: percentage($ratio-y / $ratio-x);
  }
}

/// Mixin helping defining both `width` and `height` simultaneously.
///
/// @author Hugo Giraudel
///
/// @access public
///
/// @param {Length} $width - Element’s `width`
/// @param {Length} $height ($width) - Element’s `height`
///
/// @example scss - Usage
///   .foo {
///     @include size(10em);
///   }
///
///   .bar {
///     @include size(100%, 10em);
///   }
///
/// @example css - CSS output
///   .foo {
///     width: 10em;
///     height: 10em;
///   }
///
///   .bar {
///     width: 100%;
///     height: 10em;
///   }
///
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// font-smothing
/// @include font-smoothing(on);
/// @include font-smoothing(off);
@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
///
/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
///
/// @example scss - Usage
///   .element {
///     @include hide-text;
///   }
///
/// @example css - CSS Output
///   .element {
///     overflow: hidden;
///     text-indent: 101%;
///     white-space: nowrap;
///   }
///
@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}

/// Animate css properties
// usage
// scss - @include animate(color);
//     or @include animate(color width);
//     or @include animate(color width, 1s, linear);
//
$animation-speed: 0.3s !default;

@mixin transition($properties, $duration: $transition-duration-base, $easing: $transition-easing-base) {
  $list: ();
  @each $prop in $properties {
    $str: #{$prop} #{$duration} #{$easing};
    $list: join($list, #{$str}, comma);
  }
  transition: $list;
}

/// Mixin for styling form-placeholders
/// @example scss - Usage
///   @include placeholder {
///    color: #333;
///   }
///
///   input[type='text'],
///   input[type='tel'],
///   input[type='email'] {
///     @include placeholder {
///      color: red;
///     }
///   }

@mixin placeholder {
  &::placeholder {
    @content;
  }
}

/// Font-size px to rem calc
/// @example scss - Usage
/// selector {
///    @include rem-font-size(16px);
/// }

@mixin rem-font-size($px-size) {
  // sass-lint:disable no-duplicate-properties
  font-size: $px-size;
  font-size: ($px-size / 10px) + rem;
}


@function url-friendly-colour($hex-bg-color) {
  @return '%23' + str-slice('#{$hex-bg-color}', 2, -1);
}

@mixin chevron-right($color) {
  $bg: str-replace($color, '#', '');
  background-image: url("data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 640 640'%3E %3Cpath fill='#{url-friendly-colour($color)}' d='M240.708 17.489c23.063 22.512 248.395 259.044 248.395 259.044 12.304 12.083 18.484 27.808 18.484 43.533s-6.179 31.449-18.484 43.422c0 0-225.333 236.644-248.395 259.044-23.063 22.512-64.554 24.056-89.107 0-24.607-23.946-26.539-57.436 0-86.845l206.739-215.622-206.739-215.623c-26.539-29.409-24.608-62.954 0-86.955 24.552-24.056 66.044-22.567 89.107 0z'%3E%3C/path%3E %3C/svg%3E");
}

/// Animate css properties
// usage
// scss - @include animate(color);
//     or @include animate(color width);
//     or @include animate(color width, 1s, linear);
//
$animation-speed: .3s !default;

@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {
	$list:();
	@each $prop in $properties {
		$str: #{$prop} #{$duration} #{$easing};
		$list: join($list, #{$str}, comma);
	}
	transition: $list;
}